#크레인 인형뽑기
"""
게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다
죠르디는 게임의 재미를 높이기 위해 화면구성과 규칙을 다음과 같이 반영하려고 합니다

게임화면은 1x1 크기의 칸들로 이루어진 nxn 크기의 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다
각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 

게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 
다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.

만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 
위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.

크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 
또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 
크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

담겨있는 인형 위치 : [[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]
크레인의 이동: [1,5,3,5,1,2,1,4]
터뜨린 인형의 개수: 4

[0,0,0,0,0]
[0,0,1,0,3]
[0,2,5,0,1]
[4,2,4,4,2]
[3,5,1,3,1]

크레인의 이동에 따르면 [1,5,3,5,1,2,1,4]

4 3 1 1 
"""

def solution(board, moves):
    # 1) 각 위치마다 가장 높이 있는 위치 구하기, moves에 따라 계속 for문을 돌리면 비효율적이라고 생각했기 때문
    location=[5 for _ in range(len(board[0]))]
    for x in range(len(board[0])):
        for y in range(len(board[0])):
            if board[y][x]!=0:
                location[x]=y
                break
    # [3, 2, 1, 3, 1] 이렇게 위치가 저장이 됨

    # 2) 범위를 벗어나면 continue, stack 맨위의 숫자와 같다면 터뜨림 다르면 추가
    #크레인의 이동에 따른 저장은 stack을 사용
    stack=[-1]
    cnt=0
    for i in moves:
        if location[i-1]==len(board[0]):
            continue
        if stack[-1]==board[location[i-1]][i-1]:
            stack.pop()
            cnt+=2
        else:
            stack.append(board[location[i-1]][i-1])

        if location[i-1]<=len(board[0])-1: #같은 경우에도 +1을 했어야 했는데 안해서 오류가 생겼다
            location[i-1]+=1
    return cnt
print(solution([[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]], [1,5,3,5,1,2,1,4]))
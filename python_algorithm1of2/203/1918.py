#1918.py

"""
수식은 일반적으로 3가지 표기법으로 표현할 수 있다. 연산자가 피연산자 가운데 위치하는 중위 표기법(일반적으로 우리가 쓰는 방법이다), 
연산자가 피연산자 앞에 위치하는 전위 표기법(prefix notation), 연산자가 피연산자 뒤에 위치하는 후위 표기법(postfix notation)이 그것이다. 
예를 들어 중위 표기법으로 표현된 a+b는 전위 표기법으로는 +ab이고, 후위 표기법으로는 ab+가 된다.

이 문제에서 우리가 다룰 표기법은 후위 표기법이다. 후위 표기법은 위에서 말한 법과 같이 연산자가 피연산자 뒤에 위치하는 방법이다. 
이 방법의 장점은 다음과 같다. 우리가 흔히 쓰는 중위 표기식 같은 경우에는 덧셈과 곱셈의 우선순위에 차이가 있어 왼쪽부터 차례로 계산할 수 없지만 
후위 표기식을 사용하면 순서를 적절히 조절하여 순서를 정해줄 수 있다. 또한 같은 방법으로 괄호 등도 필요 없게 된다. 
예를 들어 a+b*c를 후위 표기식으로 바꾸면 abc*+가 된다.

중위 표기식을 후위 표기식으로 바꾸는 방법을 간단히 설명하면 이렇다. 
우선 주어진 중위 표기식을 연산자의 우선순위에 따라 괄호로 묶어준다. 그런 다음에 괄호 안의 연산자를 괄호의 오른쪽으로 옮겨주면 된다.

예를 들어 a+b*c는 (a+(b*c))의 식과 같게 된다. 그 다음에 안에 있는 괄호의 연산자 *를 괄호 밖으로 꺼내게 되면 (a+bc*)가 된다. 
마지막으로 또 +를 괄호의 오른쪽으로 고치면 abc*+가 되게 된다.

다른 예를 들어 그림으로 표현하면 A+B*C-D/E를 완전하게 괄호로 묶고 연산자를 이동시킬 장소를 표시하면 다음과 같이 된다.

중위 표기식을 후위 표기식으로 변환해주는 프로그램을 작성하면 됨
"""
import sys

I=sys.stdin.readline

middle_s=I().strip()

'''
중위표기식을 후위표기식으로 바꾸는데 연산자와 괄호의 우선순위를 정해야한다

우선순위
2: * /
1: + -
0: ()

피연산자를 만나면 출력
연산자를 만나면
스택이 비어있다면 스택에 삽입
스택이 비어있지 않다면
- 맨위에 있는 연산자가 우선순위가 더 높거나 같다면 pop
- 맨위에 있는 연산자가 우선순위가 더 낮다면 push
for문이끝나면 스택에 있는 것들 전부 꺼내줌

괄호 (를 만났다면 스택에 push
괄호 )를 만나면 스택에서 (를 만날 때까지 pop 해준다
'''

#우선순위 계산하는  함수
#우선순의를 하는 이유: * /는 +,-보다 먼저 계산 되어야하기 때문
def priority(ex):
    #괄호의 우선순위를 낮게 한 이유는 삭제되면 안되기 때문
    if(ex=="("):
        return 0
    elif(ex=="*" or ex=="/"):
        return 2
    elif(ex=="+" or ex=="-"):
        return 1         

#빈 스택 생성
stack=[]

#중위 표기식 for문으로 돌려줌
for i in middle_s:
    #연산자라면
    if(i=="*" or i=="+" or i=="-" or i=="/"):
        #스택이 비어있지 않고 스택 위에 있는 
        # 연산자의 우선순위가 더 높거나 같다면
        while(stack and priority(stack[-1])>=priority(i)):
            #스택에서 연산자를 꺼내서 출력해준다
            print(stack.pop(), end="")
        #현재 연산자를 push 해준다
        stack.append(i)
    # (를 만나면
    elif(i=="("):
        #스택에 push 해준다
        stack.append(i)
    # )를 만나면
    elif(i==")"):
        #(를 만날때까지 pop해준다
        while(stack and stack[-1]!="("):
            print(stack.pop(), end="")
        #(도 제거하기 위해서 pop해준다
        stack.pop()
    #피연산자라면 출력해준다
    else:
        print(i, end="")
#중위표기식 검사가 끝나고 스택에 남은 연잔사들을 출력해준다
while(stack):
    print(stack.pop(), end="")

                
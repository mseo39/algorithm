#피로도
"""
XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다. 
이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다. 

* "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, 
* "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다. 

예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 
유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 
한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다. 
유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 
유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

문제 정리
던전이 3개가 있고 각 던전을 1,2,3이라고 해보자
그러면
123
132
213
231
....

즉, 순서가 있는 집합을 구해야 한다
그리고 던전을 고르면 현재 k와 던전의 최소 필요 피로도를 비교한다 k>=최소 필요 피로도인 경우에만 선택한다
또한 던전을 선택하면 k-소모 피로도를 해줘야 한다

헷갈렸던 점

언제 return을 해줘야하는지 고민했는데 할 필요가 없었다 전부 다 선택되면 함수가 끝나서 알아서 return 되기 때문
"""
def solution(k, dungeons):
    answer = -1  # 최대 깊이 초기값 설정
    visited=[0]*len(dungeons)  # 방문 여부를 저장할 리스트 초기화
    
    def dfs(v, depth):
        nonlocal k  # 함수 내에서 외부 변수 k에 접근하기 위해 nonlocal 선언
        nonlocal answer  # 함수 내에서 외부 변수 answer에 접근하기 위해 nonlocal 선언

        answer=max(answer, depth)  # 현재 최대 깊이 업데이트
        
        # 가능한 모든 던전에 대해 탐색
        for i in range(len(dungeons)):
            if visited[i]==0 and k>=dungeons[i][0]:  # 해당 던전을 방문하지 않았고 체력이 충분한 경우
                visited[i]=1  # 해당 던전 방문 표시
                k-=dungeons[i][1]  # 소비한 체력 제외
                dfs(i,depth+1)  # 다음 던전으로 깊이 증가하여 탐색
                visited[i]=0  # 백트래킹: 해당 던전 방문 표시 해제
                k+=dungeons[i][1]  # 백트래킹: 소비한 체력 추가
    dfs(0,0)  # 첫 번째 던전부터 시작하여 깊이 우선 탐색 실행
    
    return answer  # 최대 깊이 반환

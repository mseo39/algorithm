# 게임 맵 최단거리
"""
ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다.
지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.

위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 
캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다.
아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.

첫 번째 방법은 11개의 칸을 지나서 상대 팀 진영에 도착했습니다.


두 번째 방법은 15개의 칸을 지나서 상대팀 진영에 도착했습니다.


위 예시에서는 첫 번째 방법보다 더 빠르게 상대팀 진영에 도착하는 방법은 없으므로, 이 방법이 상대 팀 진영으로 가는 가장 빠른 방법입니다.

만약, 상대 팀이 자신의 팀 진영 주위에 벽을 세워두었다면 상대 팀 진영에 도착하지 못할 수도 있습니다. 예를 들어, 다음과 같은 경우에 당신의 캐릭터는 상대 팀 진영에 도착할 수 없습니다.

최단거리4_of9xfg.png

게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요. 단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

제한사항
* maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
  * n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
* maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
* 처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.
"""
from collections import deque

# 주어진 맵을 탐색하여 최단 거리를 찾는 함수
def solution(maps):
    answer = 1
    
    # 상하좌우 이동을 위한 좌표
    loc =[[1,0],[0,1],[-1,0],[0,-1]]
    
    # 맵의 행과 열의 길이
    N= len(maps)-1
    M= len(maps[0])-1
    
    # 시작점과 도착점이 벽으로 막혀있는 경우
    if maps[N][M-1]==0 and maps[N-1][M]==0:
        return -1
    
    # 너비 우선 탐색 함수
    def bfs():
        nonlocal answer
        q=deque()
        q.append([0,0])
        maps[0][0]=2 #1이 되면 이동하므로 그냥 2로 초기화
        
        # 큐가 빌 때까지 반복
        while q:
            n,m = q.popleft()
            # 상하좌우 이동
            for x,y in loc:
                # 도착점에 도달한 경우
                if n+x==N and m+y==M:
                    maps[n+x][m+y]+=maps[n][m]
                    return
                # 맵 안에 있고 이동 가능한 경우
                if 0<=n+x<=N and 0<=m+y<=M and maps[n+x][m+y]==1:
                    q.append([n+x, m+y])
                    maps[n+x][m+y]+=maps[n][m]
                    
    # 너비 우선 탐색 실행
    bfs()
    
    # 최종 맵 출력
    for i in maps:
        print(*i)
    
    # 도착점에 도달할 수 없는 경우 -1 반환, 그렇지 않으면 최단 거리 반환
    return -1 if maps[N][M]==1 else maps[N][M]-1
